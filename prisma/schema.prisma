// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())

  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  emails        Email[]
  messages      Message[]
  syncState     SyncState?

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Email {
  id           String   @id
  threadId     String
  userId       String
  subject      String?
  from         String?
  to           String?
  snippet      String?
  body         String?
  isRead       Boolean  @default(false)
  isStarred    Boolean  @default(false)
  labels       String[]
  internalDate String?
  fetchedAt    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message      Message? @relation(fields: [id], references: [id], onDelete: Cascade)
  aiMetadata   EmailAIMetadata?

  @@index([userId])
  @@index([threadId])
  @@index([internalDate])
  @@index([userId, threadId])
  @@index([userId, internalDate])
  @@map("emails")
}

model Message {
  id        String   @id @unique
  threadId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     Email?

  @@index([userId])
  @@index([threadId])
  @@index([userId, threadId])
  @@index([userId, createdAt])
  @@map("messages")
}

model SyncState {
  id             String   @id @default(uuid())
  userId         String   @unique
  historyId      String?
  lastSyncTime   DateTime @default(now())
  syncInProgress Boolean  @default(false)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sync_states")
}

model EmailAIMetadata {
  id                 String   @id @default(uuid())
  emailId            String   @unique
  category           String?
  categories         String[] // Store multiple categories
  categoryConfidences Json?   // Store confidence scores for each category
  priority           String?
  priorityExplanation String?
  summary            String?
  sentiment          String?  // Positive, Negative, Neutral
  importance         String?  // Critical, High, Medium, Low
  requiresResponse   Boolean? // Whether the email requires a response
  responseTimeframe  String?  // Suggested timeframe for response
  keywords           String[] // Key topics or keywords from the email
  processingTime     Int?     // Time taken to process in milliseconds
  modelUsed          String?  // Store which model was used for analysis
  tokensUsed         Int?     // Store token usage for analytics
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  email              Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([emailId])
  @@index([category])
  @@index([priority])
  @@index([sentiment])
  @@index([importance])
  @@index([requiresResponse])
  @@map("email_ai_metadata")
}
